//@version=6
indicator("libFVG (Fair Value Gap Module)", overlay=true, max_boxes_count=500)

// === INPUTS
show_fvg        = input.bool(true, "Show Fair Value Gaps")
extend_bars     = input.int(20, "Extend Box Bars", minval=1)
mitigation_tol  = input.float(0.1, "Mitigation Tolerance (%)", minval=0.0)
min_gap_size    = input.float(0.0, "Minimum Gap Size (points)", minval=0.0)
auto_delete     = input.bool(true, "Delete filled gaps")

// === TYPE: FVG Object
type fvg
    float top
    float bottom
    int bar_index
    bool filled
    string direction
    box fvg_box

// === GLOBAL STATE
var fvg[] active_fvgs = array.new<fvg>()
var fvg[] filled_fvgs = array.new<fvg>()


// === FUNCTION: Detect & Manage FVGs
fvg_detect() =>
    // 1️⃣ Identify potential gaps between 3-bar structures
    if bar_index > 2
        prev_high = high[2]
        prev_low  = low[2]
        mid_high  = high[1]
        mid_low   = low[1]

        // Bullish FVG: middle candle's low > candle 2's high
        if mid_low > prev_high and (mid_low - prev_high) >= min_gap_size
            new_fvg = fvg.new()
            new_fvg.top := mid_low
            new_fvg.bottom := prev_high
            new_fvg.bar_index := bar_index
            new_fvg.direction := "Bullish"
            new_fvg.filled := false
            if show_fvg
                new_fvg.fvg_box := box.new(left=bar_index - 1, right=bar_index - 1 + extend_bars,
                                           top=new_fvg.top, bottom=new_fvg.bottom,
                                           bgcolor=color.new(color.green, 85),
                                           border_color=color.new(color.white, 0))
            array.push(active_fvgs, new_fvg)

        // Bearish FVG: middle candle's high < candle 2's low
        if mid_high < prev_low and (prev_low - mid_high) >= min_gap_size
            new_fvg = fvg.new()
            new_fvg.top := prev_low
            new_fvg.bottom := mid_high
            new_fvg.bar_index := bar_index
            new_fvg.direction := "Bearish"
            new_fvg.filled := false
            if show_fvg
                new_fvg.fvg_box := box.new(left=bar_index - 1, right=bar_index - 1 + extend_bars,
                                           top=new_fvg.top, bottom=new_fvg.bottom,
                                           bgcolor=color.new(color.red, 85),
                                           border_color=color.new(color.white, 0))
            array.push(active_fvgs, new_fvg)

    // 2️⃣ Check for FVG mitigation (fill)
    n = array.size(active_fvgs)
    if n > 0
        var int[] remove_idx = array.new_int()
        for i = 0 to n - 1
            this_fvg = array.get(active_fvgs, i)

            // Check if price has re-entered the gap range
            if not this_fvg.filled
                if this_fvg.direction == "Bullish" and low <= this_fvg.bottom * (1 + mitigation_tol / 100)
                    this_fvg.filled := true
                if this_fvg.direction == "Bearish" and high >= this_fvg.top * (1 - mitigation_tol / 100)
                    this_fvg.filled := true

                if this_fvg.filled
                    if show_fvg and not na(this_fvg.fvg_box)
                        box.set_bgcolor(this_fvg.fvg_box, color.new(color.gray, 80))
                        box.set_border_color(this_fvg.fvg_box, color.new(color.gray, 0))
                    array.push(filled_fvgs, this_fvg)
                    if auto_delete
                        box.delete(this_fvg.fvg_box)
                        array.push(remove_idx, i)

        // Safely remove filled ones (reverse order)
        if array.size(remove_idx) > 0
            for j = array.size(remove_idx) - 1 to 0
                idx = array.get(remove_idx, j)
                array.remove(active_fvgs, idx)


// === DEMO / TEST (independent use)
fvg_detect()
